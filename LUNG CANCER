import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load dataset (Replace with actual file path)
data = pd.read_csv(r"C:\Users\erefa\OneDrive\Desktop\lung_cancer\Lung Cancer\dataset_med.csv")

# Display first few rows
print("Dataset Preview:\n", data.head())

# Drop unnecessary columns (ID and dates)
data = data.drop(columns=['id', 'diagnosis_date', 'end_treatment_date'])

# Encode categorical features
categorical_columns = ['gender', 'country', 'cancer_stage', 'family_history', 
                       'smoking_status', 'hypertension', 'asthma', 'cirrhosis', 
                       'other_cancer', 'treatment_type', 'survived']

label_encoders = {}
for col in categorical_columns:
    label_encoders[col] = LabelEncoder()
    data[col] = label_encoders[col].fit_transform(data[col])

# Define features and target variable
X = data.drop(columns=['survived'])
y = data['survived']

# Split data into training/testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale numerical features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

# Save model, scaler, and encoders
joblib.dump(model, "lung_cancer_model.pkl")
joblib.dump(scaler, "scaler.pkl")
joblib.dump(label_encoders, "label_encoders.pkl")

# --- Graph 1: Feature Importance ---
plt.figure(figsize=(10, 5))
feature_importance = model.feature_importances_
features = X.columns
sns.barplot(x=feature_importance, y=features, palette="viridis")
plt.xlabel("Feature Importance Score")
plt.ylabel("Features")
plt.title("Feature Importance in Lung Cancer Survival Prediction")
plt.show()

# --- Graph 2: Survival Rate Distribution ---
plt.figure(figsize=(6, 4))
sns.countplot(x=y, palette="coolwarm")
plt.xlabel("Survival Status")
plt.ylabel("Number of Patients")
plt.title("Distribution of Survival vs. Non-Survival")
plt.xticks(ticks=[0, 1], labels=["Not Survived", "Survived"])
plt.show()

# --- Graph 3: Confusion Matrix ---
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Not Survived", "Survived"], yticklabels=["Not Survived", "Survived"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix for Survival Prediction")
plt.show()

# --- Prediction Function ---
def predict_survival():
    print("\nEnter Patient Details:")
    age = float(input("Age: "))
    gender = input("Gender (male/female): ")
    country = input("Country: ")
    cancer_stage = input("Cancer Stage (Stage I, Stage II, Stage III, Stage IV): ")
    family_history = input("Family History (yes/no): ")
    smoking_status = input("Smoking Status (current smoker/former smoker/never smoked/passive smoker): ")
    bmi = float(input("BMI: "))
    cholesterol_level = float(input("Cholesterol Level: "))
    hypertension = input("Hypertension (yes/no): ")
    asthma = input("Asthma (yes/no): ")
    cirrhosis = input("Cirrhosis (yes/no): ")
    other_cancer = input("Other Cancer (yes/no): ")
    treatment_type = input("Treatment Type (surgery/chemotherapy/radiation/combined): ")

    # Convert input into a DataFrame
    input_data = pd.DataFrame([[age, gender, country, cancer_stage, family_history,
                                smoking_status, bmi, cholesterol_level, hypertension,
                                asthma, cirrhosis, other_cancer, treatment_type]],
                              columns=X.columns)

    # Encode categorical inputs
    for col in categorical_columns:
        if col in input_data.columns:
            input_data[col] = label_encoders[col].transform([input_data[col][0]])

    # Scale input data
    input_data = scaler.transform(input_data)

    # Predict survival
    prediction = model.predict(input_data)
    result = "Survived" if prediction[0] == 1 else "Not Survived"
    print("\nPrediction:", result)

# Run prediction
predict_survival()
